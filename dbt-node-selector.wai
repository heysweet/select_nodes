use * from node

record edge {
    unique-id: unique-id,
    parents: list<unique-id>
}


variant resource-type-filter {
    all,
    none,
    some(list<node-type>),
}

variant selector-create-error {
    missing-field(string),
    no-matching-resource-type(string),
}

variant selection-error {
    no-matching-resource-type(string),
    node-not-in-graph(string),
    missing-value-error(string),
    parents-depth-parse-int-error(string),
    childrens-depth-parse-int-error(string),
    incompatible-prefix-and-suffix-error(string),
    failed-regex-match-error(string),
    invalid-method-error(string),
    invalid-selector(string),
    matched-empty-method-error,
    invalid-indirect-selection-error(string),
    bool-input-error(string),
    no-nodes-for-selection-criteria(string),
    requires-previous-state(string),
}

sum: func(a: u32, b: u32) -> u32

create-node-selector: func(nodes: list<node>, edges: list<edge>) -> expected<node-selector, selector-create-error>

resource node-selector {
    static new: func(nodes: list<node>, edges: list<edge>) -> expected<node-selector, selector-create-error>

    num-nodes: func() -> u32

    does-node-exist: func(node-id: unique-id) -> bool

    update: func(nodes: list<node>, edges: list<edge>) -> expected<node-selector, selector-create-error>

    select: func(selector: string) -> expected<list<unique-id>, selection-error>

    select-type: func(selector: string, resource-type-filter: resource-type-filter) -> expected<list<unique-id>, selection-error>

    select-included: func(included-nodes: list<unique-id>, selector: string, resource-type-filter: resource-type-filter) -> expected<list<unique-id>, selection-error>
}
