type unique-id = string

record node {
    unique-id: unique-id,
    name: string,
    resource-type: string,
    package-name: string,
    path: string,
    original-file-path: string,
    depends-on: list<unique-id>,
    /// Fully qualified name
    fqn: list<string>
}

record edge {
    unique-id: unique-id,
    parents: list<unique-id>
}

variant node-type {
    model,
    analysis,
    test,
    snapshot,
    operation,
    seed,
    rpc,
    sql-operation,
    doc,
    source,
    macro,
    exposure,
    metric,
    group
}

variant resource-type-filter {
    all,
    none,
    some(list<node-type>),
}

variant selector-create-error {
    missing-field(string),
    no-matching-resource-type(string),
}

variant selection-error {
    no-matching-resource-type(string),
    node-not-in-graph(string),
    missing-value-error(string),
    parents-depth-parse-int-error(string),
    childrens-depth-parse-int-error(string),
    incompatible-prefix-and-suffix-error(string),
    failed-regex-match-error(string),
    invalid-method-error(string),
    matched-empty-method-error,
    invalid-indirect-selection-error(string),
    bool-input-error(string),
    no-nodes-for-selection-criteria(string),
    state-selector-with-no-previous-state(string),
}

resource node-selector {
    static new: func(nodes: list<node>, edges: list<edge>) -> expected<node-selector, selector-create-error>

    update: func(nodes: list<node>, edges: list<edge>) -> expected<node-selector, selector-create-error>

    select: func(selector: string) -> expected<list<unique-id>, selection-error>

    select-type: func(selector: string, resource-type-filter: resource-type-filter) -> expected<list<unique-id>, selection-error>

    select-included: func(included-nodes: list<unique-id>, selector: string, resource-type-filter: resource-type-filter) -> expected<list<unique-id>, selection-error>
}
