type unique-id = string

variant access-type {
    protected,
    private,
    public
}

record test-node {
    /// Fully qualified name
    fqn: list<string>
}

record snapshot-node {
    /// Fully qualified name
    fqn: list<string>
}

record operation-node {
    /// Fully qualified name
    fqn: list<string>
}

record group-node {
    /// Fully qualified name
    fqn: list<string>
}

record seed-node {
    /// Fully qualified name
    fqn: list<string>,
    depends-on: list<string>,
    node-config: list<tuple<string, string>>
}

// Has all graph-node fields
record source-node {
    /// Fully qualified name
    fqn: list<string>
}

// Has all graph-node fields
record exposure-node {
    /// Fully qualified name
    fqn: list<string>
}

// Has all graph-node fields
record metric-node {
    /// Fully qualified name
    fqn: list<string>
}

// Has all compiled-node fields
record model-node {
    /// Fully qualified name
    fqn: list<string>,
    depends-on: list<string>,
    node-config: list<tuple<string, string>>,
    access: access-type
}

// Has all parsed-node fields
record analysis-node {
    /// Fully qualified name
    fqn: list<string>,
    depends-on: list<string>,
    node-config: list<tuple<string, string>>
}

// Has all parsed-node fields
record rpc-node {
    /// Fully qualified name
    fqn: list<string>,
    depends-on: list<string>,
    node-config: list<tuple<string, string>>
}

// Has all parsed-node fields
record sql-operation-node {
    /// Fully qualified name
    fqn: list<string>,
    depends-on: list<string>,
    node-config: list<tuple<string, string>>
}

/// Has no FQN
record macro-node {
    macro-sql: string,
    depends-on: list<unique-id>,
}

/// Has no FQN
record doc-node {
    block-contents: string
}

variant node-type {
    model(model-node),
    analysis(analysis-node),
    test(test-node),
    snapshot(snapshot-node),
    /// Operation, or HookNode
    operation(operation-node),
    seed(seed-node),
    rpc(rpc-node),
    sql-operation(sql-operation-node),
    source(source-node),
    exposure(exposure-node),
    metric(metric-node),
    group(group-node),
    doc(doc-node),
    macro(macro-node),
}

record node {
    unique-id: unique-id,
    name: string,
    node-type: node-type,
    package-name: string,
    path: string,
    original-file-path: string,
    depends-on: list<unique-id>,
}